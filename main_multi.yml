---
- name: Set up cluster-wide configuration.
  hosts: all
  gather_facts: false
  become: true

  handlers:
    - name: reboot-pi
      ansible.builtin.reboot:
    - name: restart-nfs
      ansible.builtin.service:
        name: nfs-server
        state: restarted

  vars_files:
    - config.yml

  tasks:
    - name: Install common utils
      ansible.builtin.package:
        name:
          - ca-certificates
          - nfs-common
          - vim
          - build-essential
          - lm-sensors
          - python3-pip
          - python3-setuptools
          - python3-cryptography
        state: present
      become: true
    - name: Ensure required Python libraries are installed.
      ansible.builtin.pip:
        name:
          - openshift
          - pyyaml
        state: present
      become: true
    - name: Download K3s install script.
      ansible.builtin.get_url:
        url: https://get.k3s.io
        dest: "~/k3s_install.sh"
        mode: a+x
    - name: Add user to sudo with NOPASSWD
      community.general.sudoers:
        name: "010_{{ ansible_user }}-nopasswd"
        user: "{{ ansible_user }}"
        state: present
        commands: ALL
        nopassword: true

- name: Configure the control plane.
  hosts: control_plane
  gather_facts: false
  become: true

  vars_files:
    - config.yml

  tasks:
    - name: Ensure cgroups are configured correctly in cmdline.txt.
      ansible.builtin.replace:
        path: /boot/cmdline.txt
        regexp: '^([\w](?!.*\b{{ item }}\b).*)$'
        replace: '\1 {{ item }}'
      with_items:
        - "cgroup_memory=1"
        - "cgroup_enable=memory"
      when: ansible_facts['os_family'] == 'Debian' and ansible_facts['distribution'] == 'Raspberry Pi OS'
      notify: reboot-pi
      ignore_errors: yes
    - name: Install K3s on control plane (takes a while).
      ansible.builtin.shell: >-
        ~/k3s_install.sh >> ~/k3s_install_log.txt
      args:
        chdir: "~"
        creates: /var/lib/rancher/k3s/server/node-token
    - name: Get node token.
      ansible.builtin.command: cat /var/lib/rancher/k3s/server/node-token
      changed_when: false 
      register: node_token_output
    - name: Set node_token fact.
      ansible.builtin.set_fact:
        node_token: "{{ node_token_output.stdout_lines[0] }}"
    - name: Ensure required dependencies are installed.
      ansible.builtin.package:
        name:
          - build-essential
          - golang
          - git
        state: present
      become: true
    - name: Ensure required Python libraries are installed.
      ansible.builtin.pip:
        name:
          - openshift
          - pyyaml
          - golang
        state: present
      become: true
    - name: Save node token to local file
      ansible.builtin.copy:
        content: "{{ node_token }}"
        dest: "./node_token.txt"
      delegate_to: localhost
      become: false

    - name: Copy K3s kubeconfig to local machine
      ansible.builtin.fetch:
        src: /etc/rancher/k3s/k3s.yaml
        dest: "./k3s.yaml"
        flat: yes



- name: Configure the worker nodes.
  hosts: nodes
  gather_facts: false
  become: true

  vars_files:
    - config.yml

  tasks:
    - name: Install K3s on nodes (takes a while).
      ansible.builtin.shell: >-
        K3S_URL="https://{{ groups['control_plane'][0] }}:6443"
        K3S_TOKEN="{{ hostvars[groups['control_plane'][0]]['node_token'] }}"
        ~/k3s_install.sh >> ~/k3s_install_log.txt
      args:
        chdir: "~"
        creates: /var/lib/rancher/k3s/agent/kubelet.kubeconfig

    - name: Ensure required dependencies are installed.
      ansible.builtin.package:
        name:
          - python3-pip
          - python3-setuptools
          - build-essential
          - golang
        state: present
      become: true

- name: Set up Helm.
  import_playbook: tasks/kubernetes/helm.yml
  tags: ['helm']

- name: Set up NFS PVCs.
  import_playbook: tasks/kubernetes/nfs.yml
  tags: ['nfs'] 

- name: Set up ArgoCD.
  import_playbook: tasks/kubernetes/argo-cd.yml
  tags: ['argo-cd']

