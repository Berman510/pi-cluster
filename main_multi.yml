---
- name: Set up cluster-wide configuration.
  hosts: all
  gather_facts: false
  become: true

  handlers:
    - name: reboot-pi
      ansible.builtin.reboot:

    - name: restart-nfs
      ansible.builtin.service:
        name: nfs-server
        state: restarted

  vars_files:
    - config.yml

  tasks:
    - name: Install common utils
      ansible.builtin.package:
        name:
          - ca-certificates
          - nfs-common
          - vim
          - build-essential
          - lm-sensors
          - python3-pip
          - python3-setuptools
          - python3-cryptography
          - curl
          - lm-sensors
        state: present
      become: true

    - name: Ensure required Python libraries are installed.
      ansible.builtin.pip:
        name:
          - openshift
          - pyyaml
        state: present
      become: true

    - name: Download K3s install script.
      ansible.builtin.get_url:
        url: https://get.k3s.io
        dest: "~/k3s_install.sh"
        mode: a+x

    - name: Add user to sudo with NOPASSWD
      community.general.sudoers:
        name: "010_{{ ansible_user }}-nopasswd"
        user: "{{ ansible_user }}"
        state: present
        commands: ALL
        nopassword: true

- name: Play to update /etc/hosts for cluster group
  hosts: cluster
  tasks:
    - name: Update /etc/hosts with unique entries for cluster group
      become: true
      blockinfile:
        path: /etc/hosts
        block: |
          {% for host in groups['cluster'] %}
          {% set ip = hostvars[host]['ansible_host'] %}
          {% if ip not in already_added %}
          {{ ip }} {{ host }}
          {% set _ = already_added.append(ip) %}
          {% endif %}
          {% endfor %}
        marker: "# {mark} ANSIBLE MANAGED BLOCK FOR CLUSTER GROUP"
      vars:
        already_added: []


- name: Configure storage node.
  hosts: storage
  gather_facts: true
  become: true

  vars_files:
    - config.yml

  tasks:
    - name: Set up mount.
      ansible.posix.mount:
        path: "/srv"
        src: UUID="{{ ansible_devices.sda.partitions.sda1.uuid }}"
        fstype: ext4
        opts: rw,auto
        dump: '1'
        state: mounted
      when: ansible_devices.sda.partitions.sda1.uuid is defined
    - name: Set up storage.
      include_tasks: tasks/storage/{{ storage_type }}.yml

- name: Configure the control plane.
  hosts: control_plane
  gather_facts: false
  become: true

  vars_files:
    - config.yml

  tasks:

    - name: Ensure cgroups are configured correctly in cmdline.txt.
      ansible.builtin.replace:
        path: /boot/cmdline.txt
        regexp: '^([\w](?!.*\b{{ item }}\b).*)$'
        replace: '\1 {{ item }}'
      with_items:
        - "cgroup_memory=1"
        - "cgroup_enable=memory"
      when: ansible_facts['os_family'] == 'Debian' and ansible_facts['distribution'] == 'Raspberry Pi OS'
      notify: reboot-pi
      ignore_errors: yes

    - name: Install K3s on control plane (takes a while).
      ansible.builtin.shell: >-
        ~/k3s_install.sh >> ~/k3s_install_log.txt
      args:
        chdir: "~"
        creates: /var/lib/rancher/k3s/server/node-token

    - name: Get node token.
      ansible.builtin.command: cat /var/lib/rancher/k3s/server/node-token
      changed_when: false
      register: node_token_output

    - name: Set node_token fact.
      ansible.builtin.set_fact:
        node_token: "{{ node_token_output.stdout_lines[0] }}"

    - name: Ensure required dependencies are installed.
      ansible.builtin.package:
        name:
          - build-essential
          - golang
          - git
        state: present
      become: true

    - name: Ensure required Python libraries are installed.
      ansible.builtin.pip:
        name:
          - openshift
          - pyyaml
          - golang
        state: present
      become: true

    - name: Save node token to local file
      ansible.builtin.copy:
        content: "{{ node_token }}"
        dest: "./node_token.txt"
      delegate_to: localhost
      become: false

    - name: Copy K3s kubeconfig to local machine
      ansible.builtin.fetch:
        src: /etc/rancher/k3s/k3s.yaml
        dest: "./kube_config.yaml"
        flat: yes

- name: Update local kube config with pi-cluster entry
  hosts: localhost
  vars:
    kubeconfig_path: "~/.kube/config"
    k3s_config_path: "kube_config.yaml"
    cluster_name: "pi-cluster"
  tasks:
    - name: Read k3s config file
      ansible.builtin.shell: "cat {{ k3s_config_path }}"
      register: k3s_config_content

    - name: Replace server IP in k3s config
      ansible.builtin.set_fact:
        k3s_config_modified: "{{ k3s_config_content.stdout | replace('https://127.0.0.1:6443', 'https://' + groups['control_plane'][0] + ':6443') }}"

    - name: Check if pi-cluster exists in kubeconfig
      shell: "yq e '.clusters[] | select(.name == \"{{ cluster_name }}\")' {{ kubeconfig_path }}"
      register: cluster_exists
      ignore_errors: yes

    - name: Update pi-cluster in kubeconfig if exists
      shell: |
        yq e '.clusters[] |= (select(.name == "{{ cluster_name }}").cluster.server = "https://{{ control_plane_ip }}:6443")' -i {{ kubeconfig_path }}
        yq e '.users[] |= (select(.name == "{{ cluster_name }}").user = ({"client-key-data": "{{ k3s_config_modified | regex_search('client-key-data: (.*)') | first }}", "client-certificate-data": "{{ k3s_config_modified | regex_search('client-certificate-data: (.*)') | first }}"))' -i {{ kubeconfig_path }}
      when: cluster_exists.stderr == ''

    - name: Add pi-cluster to kubeconfig if not exists
      shell: |
        yq e '.clusters += [{"name": "{{ cluster_name }}", "cluster": {"server": "https://'{{ groups['control_plane'][0] }}':6443"}}]' -i {{ kubeconfig_path }}
        yq e '.users += [{"name": "{{ cluster_name }}", "user": {"client-key-data": "{{ k3s_config_modified | regex_findall('client-key-data: (.*)')[0] }}", "client-certificate-data": "{{ k3s_config_modified | regex_findall('client-certificate-data: (.*)')[0] }}"}]' -i {{ kubeconfig_path }}
      when: cluster_exists.stderr != ''

- name: Configure NFS clients
  hosts: all:!storage
  gather_facts: false
  become: true

  vars_files:
    - config.yml

  tasks:
    - name: Create nfs mount directory
      ansible.builtin.file:
        path: /{{ storage_nfs_dir }}/{{ storage_nfs_share_name }}
        state: directory
        mode: '0755'
      become: true

    - name: Mount nfs share
      ansible.builtin.mount:
        path: /{{ storage_nfs_dir }}/{{ storage_nfs_share_name }}
        src: "{{ hostvars[groups['storage'][0]]['ansible_host'] }}:/{{ storage_nfs_dir }}/{{ storage_nfs_share_name }}"
        fstype: nfs
        opts: defaults
        state: mounted
        dump: 0
        passno: 0
      become: true

- name: Configure the worker nodes.
  hosts: nodes
  gather_facts: false
  become: true

  vars_files:
    - config.yml

  tasks:
    - name: Install K3s on nodes (takes a while).
      ansible.builtin.shell: >-
        K3S_URL="https://{{ groups['control_plane'][0] }}:6443"
        K3S_TOKEN="{{ hostvars[groups['control_plane'][0]]['node_token'] }}"
        ~/k3s_install.sh >> ~/k3s_install_log.txt
      args:
        chdir: "~"
        creates: /var/lib/rancher/k3s/agent/kubelet.kubeconfig

    - name: Ensure required dependencies are installed.
      ansible.builtin.package:
        name:
          - python3-pip
          - python3-setuptools
          - build-essential
          - golang
        state: present
      become: true

- name: Set up Helm.
  import_playbook: tasks/kubernetes/helm.yml
  tags: ['helm']

- name: Set up NFS PVCs.
  import_playbook: tasks/kubernetes/nfs.yml
  tags: ['nfs']

- name: Set up Kubernetes secrets.
  import_playbook: tasks/kubernetes/secrets.yml
  tags: ['secrets']

- name: Set up ArgoCD.
  import_playbook: tasks/kubernetes/argo-cd.yml
  tags: ['argo-cd']

- name: Deploy ArgoCD Apps.
  import_playbook: tasks/kubernetes/argo-cd-apps.yml
  tags: ['argo-cd']
